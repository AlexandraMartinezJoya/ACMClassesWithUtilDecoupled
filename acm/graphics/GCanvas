//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.graphics;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.MouseEvent;
import java.util.Iterator;

public class GCanvas extends Container implements GContainer {
    private GCanvasListener gCanvasListener;
    private GObject lastObject;
    private GObject dragObject;
    private GObjectList contents = new GObjectList(this);
    private Image offscreenImage;
    private boolean autoRepaint;
    private boolean nativeArcFlag;
    private boolean opaque;

    public GCanvas() {
        this.setBackground(Color.WHITE);
        this.setForeground(Color.BLACK);
        this.setOpaque(true);
        this.setAutoRepaintFlag(true);
        this.setNativeArcFlag(false);
        this.setLayout((LayoutManager)null);
        this.gCanvasListener = new GCanvasListener(this);
        this.addComponentListener(this.gCanvasListener);
        this.addMouseListener(this.gCanvasListener);
        this.addMouseMotionListener(this.gCanvasListener);
    }

    public void add(GObject var1) {
        this.contents.add(var1);
        this.conditionalRepaint();
    }

    public final void add(GObject var1, double var2, double var4) {
        var1.setLocation(var2, var4);
        this.add(var1);
    }

    public final void add(GObject var1, GPoint var2) {
        this.add(var1, var2.getX(), var2.getY());
    }

    public void remove(GObject var1) {
        this.contents.remove(var1);
        this.conditionalRepaint();
    }

    public void removeAll() {
        this.contents.removeAll();
        super.removeAll();
        this.repaint();
    }

    public Component add(Component var1) {
        super.add(var1);
        Dimension var2 = var1.getSize();
        if (var2.width == 0 || var2.height == 0) {
            Dimension var3 = var1.getPreferredSize();
            if (var2.width == 0) {
                var2.width = var3.width;
            }

            if (var2.height == 0) {
                var2.height = var3.height;
            }

            var1.setSize(var2);
        }

        return var1;
    }

    public final void add(Component var1, double var2, double var4) {
        var1.setLocation(GMath.round(var2), GMath.round(var4));
        this.add(var1);
    }

    public final void add(Component var1, GPoint var2) {
        this.add(var1, var2.getX(), var2.getY());
    }

    public void remove(Component var1) {
        super.remove(var1);
        this.conditionalRepaint();
    }

    public int getElementCount() {
        return this.contents.getElementCount();
    }

    public GObject getElement(int var1) {
        return this.contents.getElement(var1);
    }

    public GObject getElementAt(double var1, double var3) {
        return this.contents.getElementAt(var1, var3, false);
    }

    public final GObject getElementAt(GPoint var1) {
        return this.getElementAt(var1.getX(), var1.getY());
    }

    public Iterator<GObject> iterator() {
        return new GIterator(this, 0);
    }

    public Iterator<GObject> iterator(int var1) {
        return new GIterator(this, var1);
    }

    public void setOpaque(boolean var1) {
        this.opaque = var1;
        this.conditionalRepaint();
    }

    public boolean isOpaque() {
        return this.opaque;
    }

    public int getWidth() {
        return this.getSize().width;
    }

    public int getHeight() {
        return this.getSize().height;
    }

    public void paint(Graphics var1) {
        Graphics var2 = var1;
        if (this.isOpaque()) {
            if (this.offscreenImage == null) {
                this.initOffscreenImage();
            }

            if (this.offscreenImage != null) {
                var1 = this.offscreenImage.getGraphics();
            }

            Dimension var3 = this.getSize();
            var1.setColor(this.getBackground());
            var1.fillRect(0, 0, var3.width, var3.height);
            var1.setColor(this.getForeground());
        }

        this.contents.mapPaint(var1);
        if (this.isOpaque() && this.offscreenImage != null) {
            var2.drawImage(this.offscreenImage, 0, 0, this);
        }

        super.paint(var2);
    }

    public void update(Graphics var1) {
        this.paint(var1);
    }

    public void setAutoRepaintFlag(boolean var1) {
        this.autoRepaint = var1;
    }

    public boolean getAutoRepaintFlag() {
        return this.autoRepaint;
    }

    public void setNativeArcFlag(boolean var1) {
        this.nativeArcFlag = var1;
    }

    public boolean getNativeArcFlag() {
        return this.nativeArcFlag;
    }

    protected void sendToFront(GObject var1) {
        this.contents.sendToFront(var1);
        this.conditionalRepaint();
    }

    protected void sendToBack(GObject var1) {
        this.contents.sendToBack(var1);
        this.conditionalRepaint();
    }

    protected void sendForward(GObject var1) {
        this.contents.sendForward(var1);
        this.conditionalRepaint();
    }

    protected void sendBackward(GObject var1) {
        this.contents.sendBackward(var1);
        this.conditionalRepaint();
    }

    protected void dispatchMouseEvent(MouseEvent var1) {
        GObject var2 = this.contents.getElementAt((double)var1.getX(), (double)var1.getY(), true);
        GMouseEvent var3 = null;
        if (var2 != this.lastObject) {
            if (this.lastObject != null) {
                var3 = new GMouseEvent(this.lastObject, 505, var1);
                this.lastObject.fireMouseListeners(var3);
            }

            if (var2 != null) {
                var3 = new GMouseEvent(var2, 504, var1);
                var2.fireMouseListeners(var3);
            }
        }

        this.lastObject = var2;
        if (this.dragObject != null) {
            var2 = this.dragObject;
        }

        if (var2 != null) {
            int var4 = var1.getID();
            if (var4 != 505 && var4 != 504 && (var4 != 506 || this.dragObject != null)) {
                if (var4 == 501) {
                    this.dragObject = var2;
                } else if (var4 == 502) {
                    this.dragObject = null;
                }

                var3 = new GMouseEvent(var2, var4, var1);
                var2.fireMouseListeners(var3);
            }
        }

        if (var3 != null && var3.isConsumed()) {
            var1.consume();
        }

    }

    protected void initOffscreenImage() {
        Dimension var1 = this.getSize();
        if (var1.width > 0 && var1.height > 0) {
            this.offscreenImage = this.createImage(var1.width, var1.height);
        }
    }

    protected void conditionalRepaint() {
        if (this.autoRepaint) {
            this.repaint();
        }

    }

    protected void updateEnabledList() {
        this.contents.updateEnabledList();
    }

    static MouseEvent createMouseEvent(Object var0, int var1, MouseEvent var2) {
        return new GMouseEvent(var0, var1, var2);
    }
}
