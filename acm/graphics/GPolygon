//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.graphics;

import acm.util.ErrorException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;

public class GPolygon extends GObject implements GFillable, GScalable {
    private double xScale;
    private double yScale;
    private double rotation;
    private VertexList vertices;
    private boolean cacheValid;
    private boolean complete;
    private Polygon poly;
    private boolean isFilled;
    private Color fillColor;
    static final long serialVersionUID = 1L;

    public GPolygon() {
        this.vertices = new VertexList();
        this.clear();
    }

    public GPolygon(double var1, double var3) {
        this();
        this.setLocation(var1, var3);
    }

    public GPolygon(GPoint[] var1) {
        this();
        this.vertices.add(var1);
        this.markAsComplete();
    }

    public void addVertex(double var1, double var3) {
        if (this.complete) {
            throw new ErrorException("You can't add vertices to a GPolygon that has been marked as complete.");
        } else {
            this.vertices.addVertex(var1, var3);
        }
    }

    public void addEdge(double var1, double var3) {
        if (this.complete) {
            throw new ErrorException("You can't add edges to a GPolygon that has been marked as complete.");
        } else {
            this.vertices.addEdge(var1, var3);
        }
    }

    public final void addPolarEdge(double var1, double var3) {
        if (this.complete) {
            throw new ErrorException("You can't add edges to a GPolygon that has been marked as complete.");
        } else {
            this.vertices.addEdge(var1 * GMath.cosDegrees(var3), -var1 * GMath.sinDegrees(var3));
        }
    }

    public void addArc(double var1, double var3, double var5, double var7) {
        if (this.complete) {
            throw new ErrorException("You can't add edges to a GPolygon that has been marked as complete.");
        } else {
            this.vertices.addArc(var1, var3, var5, var7);
        }
    }

    public GPoint getCurrentPoint() {
        return this.vertices.getCurrentPoint();
    }

    public void scale(double var1, double var3) {
        this.xScale *= var1;
        this.yScale *= var3;
        this.repaint();
    }

    public final void scale(double var1) {
        this.scale(var1, var1);
    }

    public void rotate(double var1) {
        this.rotation += var1;
        this.repaint();
    }

    public void setFilled(boolean var1) {
        this.isFilled = var1;
        this.repaint();
    }

    public boolean isFilled() {
        return this.isFilled;
    }

    public void setFillColor(Color var1) {
        this.fillColor = var1;
        this.repaint();
    }

    public Color getFillColor() {
        return this.fillColor == null ? this.getColor() : this.fillColor;
    }

    public GRectangle getBounds() {
        return this.vertices.getBounds(this.getX(), this.getY(), this.xScale, this.yScale, this.rotation);
    }

    public boolean contains(double var1, double var3) {
        return this.vertices.contains((var1 - this.getX()) / this.xScale, (var3 - this.getY()) / this.yScale);
    }

    public void paint(Graphics var1) {
        if (this.vertices.size() != 0) {
            Polygon var2 = this.getPolygon();
            if (this.isFilled()) {
                var1.setColor(this.getFillColor());
                var1.fillPolygon(var2.xpoints, var2.ypoints, var2.npoints);
                var1.setColor(this.getColor());
            }

            var1.drawPolygon(var2.xpoints, var2.ypoints, var2.npoints);
        }
    }

    public void recenter() {
        this.vertices.recenter();
        this.cacheValid = false;
    }

    public Object clone() {
        try {
            GPolygon var1 = (GPolygon)super.clone();
            var1.vertices = new VertexList(var1.vertices);
            return var1;
        } catch (Exception var2) {
            throw new ErrorException("Impossible exception");
        }
    }

    protected void repaint() {
        this.cacheValid = false;
        super.repaint();
    }

    protected Polygon getPolygon() {
        if (this.cacheValid) {
            return this.poly;
        } else {
            this.poly = this.vertices.createPolygon(this.getX(), this.getY(), this.xScale, this.yScale, this.rotation);
            this.cacheValid = true;
            return this.poly;
        }
    }

    protected void markAsComplete() {
        this.complete = true;
    }

    protected void clear() {
        if (this.complete) {
            throw new ErrorException("You can't clear a GPolygon that has been marked as complete.");
        } else {
            this.vertices.clear();
            this.rotation = 0.0D;
            this.xScale = 1.0D;
            this.yScale = 1.0D;
            this.cacheValid = false;
        }
    }
}
