//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.graphics;

import java.awt.Graphics;
import java.awt.Polygon;
import java.io.Serializable;

class ArcRenderer implements Serializable {
    private static final double EPSILON = 1.0E-5D;
    private GObject target;
    private Polygon poly;
    private int x0;
    private int y0;
    private GRectangle oldBounds;
    private double oldStart;
    private double oldSweep;
    private boolean cacheValid;

    public ArcRenderer(GObject var1) {
        this.target = var1;
        this.poly = new Polygon();
        this.cacheValid = false;
    }

    public synchronized void draw(Graphics var1) {
        this.validateCache();
        if (((GFillable)this.target).isFilled()) {
            var1.setColor(((GFillable)this.target).getFillColor());
            var1.fillPolygon(this.poly.xpoints, this.poly.ypoints, this.poly.npoints);
            var1.setColor(this.target.getColor());
            var1.drawPolygon(this.poly.xpoints, this.poly.ypoints, this.poly.npoints);
        } else if (this.target instanceof GArc) {
            var1.drawPolyline(this.poly.xpoints, this.poly.ypoints, this.poly.npoints - 1);
        } else {
            var1.drawPolygon(this.poly.xpoints, this.poly.ypoints, this.poly.npoints);
        }

    }

    private void validateCache() {
        GRectangle var1 = null;
        double var2 = 0.0D;
        double var4 = 360.0D;
        if (!(this.target instanceof GOval) && !(this.target instanceof GRoundRect)) {
            GArc var6 = (GArc)this.target;
            var1 = var6.getFrameRectangle();
            var2 = var6.getStartAngle();
            var4 = var6.getSweepAngle();
            if (var2 != this.oldStart || var4 != this.oldSweep) {
                this.cacheValid = false;
            }
        } else {
            var1 = this.target.getBounds();
        }

        if (var1 != null) {
            double var19 = var1.getX();
            double var8 = var1.getY();
            double var10 = var1.getWidth();
            double var12 = var1.getHeight();
            if (!(var10 <= 0.0D) && !(var12 <= 0.0D)) {
                if (!this.cacheValid || var10 != this.oldBounds.getWidth() || var12 != this.oldBounds.getHeight()) {
                    this.poly.npoints = 0;
                    if (this.target instanceof GRoundRect) {
                        GRoundRect var14 = (GRoundRect)this.target;
                        double var15 = (double)GMath.round(var14.getArcWidth());
                        double var17 = (double)GMath.round(var14.getArcHeight());
                        this.poly.addPoint(GMath.round(var19 + var15 / 2.0D + 1.0E-5D), GMath.round(var8 + 1.0E-5D));
                        this.addArc(var19, var8, var15, var17, 90.0D, 90.0D);
                        this.addArc(var19, var8 + var12 - var17, var15, var17, 180.0D, 90.0D);
                        this.addArc(var19 + var10 - var15, var8 + var12 - var17, var15, var17, 270.0D, 90.0D);
                        this.addArc(var19 + var10 - var15, var8, var15, var17, 0.0D, 90.0D);
                    } else {
                        this.addArc(var19, var8, var10, var12, var2, var4);
                        if (this.target instanceof GArc) {
                            this.poly.addPoint(GMath.round(var19 + var10 / 2.0D + 1.0E-5D), GMath.round(var8 + var12 / 2.0D + 1.0E-5D));
                            this.oldStart = var2;
                            this.oldSweep = var4;
                        }
                    }

                    this.x0 = GMath.round((double)this.poly.xpoints[0] - var19);
                    this.y0 = GMath.round((double)this.poly.ypoints[0] - var8);
                    this.oldBounds = var1;
                }

                if (var19 != this.oldBounds.getX() || var8 != this.oldBounds.getY()) {
                    this.movePoly(GMath.round(var19 + 1.0E-5D), GMath.round(var8 + 1.0E-5D));
                    this.oldBounds = var1;
                }

                this.cacheValid = true;
            }
        }
    }

    private synchronized void addArc(double var1, double var3, double var5, double var7, double var9, double var11) {
        double var13 = var7 / var5;
        double var15 = var5 / 2.0D;
        double var17 = var7 / 2.0D;
        double var19 = var1 + var15;
        double var21 = var3 + var17;
        if (var11 < 0.0D) {
            var9 += var11;
            var11 = -var11;
        }

        if (var11 > 359.99D) {
            var11 = 360.0D;
        }

        double var23 = Math.atan2(1.0D, Math.max(var5, var7));
        int var25 = (int)(GMath.toRadians(var11) / var23);
        var23 = GMath.toRadians(var11) / (double)var25;
        double var26 = GMath.toRadians(var9);

        for(int var28 = 0; var28 <= var25; ++var28) {
            double var29 = var19 + var15 * Math.cos(var26);
            double var31 = var21 - var15 * Math.sin(var26) * var13;
            this.poly.addPoint(GMath.round(var29 + 1.0E-5D), GMath.round(var31 + 1.0E-5D));
            var26 += var23;
        }

    }

    private synchronized void movePoly(int var1, int var2) {
        int var3 = var1 - (this.poly.xpoints[0] - this.x0);
        int var4 = var2 - (this.poly.ypoints[0] - this.y0);

        for(int var5 = 0; var5 < this.poly.npoints; ++var5) {
            int[] var10000 = this.poly.xpoints;
            var10000[var5] += var3;
            var10000 = this.poly.ypoints;
            var10000[var5] += var4;
        }

    }
}
