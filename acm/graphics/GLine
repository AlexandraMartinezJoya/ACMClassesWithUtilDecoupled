//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.graphics;

import java.awt.Graphics;

public class GLine extends GObject implements GScalable {
    public static final double LINE_TOLERANCE = 1.5D;
    private double dx;
    private double dy;
    static final long serialVersionUID = 1L;

    public GLine(double var1, double var3, double var5, double var7) {
        this.setLocation(var1, var3);
        this.dx = var5 - var1;
        this.dy = var7 - var3;
    }

    public void paint(Graphics var1) {
        double var2 = this.getX();
        double var4 = this.getY();
        var1.drawLine(GMath.round(var2), GMath.round(var4), GMath.round(var2 + this.dx), GMath.round(var4 + this.dy));
    }

    public GRectangle getBounds() {
        double var1 = Math.min(this.getX(), this.getX() + this.dx);
        double var3 = Math.min(this.getY(), this.getY() + this.dy);
        return new GRectangle(var1, var3, Math.abs(this.dx), Math.abs(this.dy));
    }

    public void setStartPoint(double var1, double var3) {
        this.dx += this.getX() - var1;
        this.dy += this.getY() - var3;
        this.setLocation(var1, var3);
    }

    public GPoint getStartPoint() {
        return this.getLocation();
    }

    public void setEndPoint(double var1, double var3) {
        this.dx = var1 - this.getX();
        this.dy = var3 - this.getY();
        this.repaint();
    }

    public GPoint getEndPoint() {
        return new GPoint(this.getX() + this.dx, this.getY() + this.dy);
    }

    public void scale(double var1, double var3) {
        this.dx *= var1;
        this.dy *= var3;
        this.repaint();
    }

    public final void scale(double var1) {
        this.scale(var1, var1);
    }

    public boolean contains(double var1, double var3) {
        double var5 = this.getX();
        double var7 = this.getY();
        double var9 = var5 + this.dx;
        double var11 = var7 + this.dy;
        double var13 = 2.25D;
        if (this.distanceSquared(var1, var3, var5, var7) < var13) {
            return true;
        } else if (this.distanceSquared(var1, var3, var9, var11) < var13) {
            return true;
        } else if (var1 < Math.min(var5, var9) - 1.5D) {
            return false;
        } else if (var1 > Math.max(var5, var9) + 1.5D) {
            return false;
        } else if (var3 < Math.min(var7, var11) - 1.5D) {
            return false;
        } else if (var3 > Math.max(var7, var11) + 1.5D) {
            return false;
        } else if ((float)var5 - (float)var9 == 0.0F && (float)var7 - (float)var11 == 0.0F) {
            return false;
        } else {
            double var15 = ((var1 - var5) * (var9 - var5) + (var3 - var7) * (var11 - var7)) / this.distanceSquared(var5, var7, var9, var11);
            return this.distanceSquared(var1, var3, var5 + var15 * (var9 - var5), var7 + var15 * (var11 - var7)) < var13;
        }
    }

    public String paramString() {
        String var1 = super.paramString();
        var1 = var1.substring(var1.indexOf(41) + 1);
        GPoint var2 = this.getStartPoint();
        String var3 = "start=(" + var2.getX() + ", " + var2.getY() + ")";
        var2 = this.getEndPoint();
        var3 = var3 + ", end=(" + var2.getX() + ", " + var2.getY() + ")";
        return var3 + var1;
    }

    private double distanceSquared(double var1, double var3, double var5, double var7) {
        return (var5 - var1) * (var5 - var1) + (var7 - var3) * (var7 - var3);
    }
}
