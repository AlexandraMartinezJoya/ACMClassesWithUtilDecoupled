//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.gui;

import acm.io.IODialog;
import acm.util.ErrorException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import javax.swing.JTextField;

public class DoubleField extends JTextField {
    private static final int MINIMUM_WIDTH = 60;
    private static final int MINIMUM_HEIGHT = 22;
    private static final int PIXEL_MARGIN = 2;
    private boolean exceptionOnError;
    private double minValue;
    private double maxValue;
    private String formatString;
    private DecimalFormat formatter;
    private NumberFormat parser;
    private IODialog dialog;
    static final long serialVersionUID = 1L;

    public DoubleField() {
        this("", -1.0D / 0.0, 1.0D / 0.0);
    }

    public DoubleField(double var1) {
        this("" + var1, -1.0D / 0.0, 1.0D / 0.0);
    }

    public DoubleField(double var1, double var3) {
        this("", var1, var3);
    }

    public DoubleField(double var1, double var3, double var5) {
        this("" + var1, var3, var5);
    }

    private DoubleField(String var1, double var2, double var4) {
        this.parser = NumberFormat.getNumberInstance(Locale.US);
        this.setBackground(Color.WHITE);
        this.setHorizontalAlignment(4);
        this.minValue = var2;
        this.maxValue = var4;
        this.setText(var1);
        this.exceptionOnError = false;
    }

    public double getValue() {
        String var1 = this.getText().trim();
        if (var1.length() == 0) {
            return this.minValue <= 0.0D && this.maxValue >= 0.0D ? 0.0D : this.minValue;
        } else {
            String var2 = null;
            double var3 = 0.0D;

            label53: {
                try {
                    var3 = this.parser.parse(var1).doubleValue();
                    if (var3 >= this.minValue && var3 <= this.maxValue) {
                        break label53;
                    }

                    var2 = "Value is outside the specified range";
                } catch (ParseException var6) {
                    var2 = "Illegal numeric format";
                }

                if (this.exceptionOnError) {
                    throw new ErrorException(var2);
                }

                String var5 = "Enter a number";
                if (this.minValue != -1.0D / 0.0) {
                    if (this.maxValue != 1.0D / 0.0) {
                        var5 = var5 + " between " + this.minValue + " and " + this.maxValue;
                    } else {
                        var5 = var5 + " greater than " + this.minValue;
                    }
                } else if (this.maxValue != 1.0D / 0.0) {
                    var5 = var5 + " less than " + this.maxValue;
                }

                if (this.dialog == null) {
                    this.dialog = new IODialog(this);
                }

                var3 = this.dialog.readDouble(var5, this.minValue, this.maxValue);
            }

            this.setValue(var3);
            return var3;
        }
    }

    public void setValue(double var1) {
        this.setText(this.formatter == null ? this.defaultFormat(var1) : this.formatter.format(var1));
    }

    public String getFormat() {
        return this.formatString;
    }

    public void setFormat(String var1) {
        String var2 = this.getText().trim();
        double var3 = 0.0D;
        if (var2.length() != 0) {
            try {
                var3 = this.parser.parse(var2).doubleValue();
            } catch (ParseException var6) {
                throw new ErrorException(var6);
            }
        }

        this.formatString = var1;
        if (var1 == null) {
            this.formatter = null;
            this.parser = NumberFormat.getNumberInstance(Locale.US);
        } else {
            this.formatter = var1.length() == 0 ? new DecimalFormat() : new DecimalFormat(var1);
            this.parser = this.formatter;
        }

        if (var2.length() != 0) {
            this.setValue(var3);
        }

    }

    public void setExceptionOnError(boolean var1) {
        this.exceptionOnError = var1;
    }

    public boolean getExceptionOnError() {
        return this.exceptionOnError;
    }

    public Dimension getPreferredSize() {
        Dimension var1 = super.getPreferredSize();
        return new Dimension(Math.max(60, var1.width), Math.max(22, var1.height));
    }

    private String defaultFormat(double var1) {
        String var3 = "" + var1;
        int var4 = this.getSize().width - 4;
        FontMetrics var5 = this.getFontMetrics(this.getFont());
        if (var5.stringWidth(var3) <= var4) {
            return var3;
        } else {
            int var6 = var3.indexOf("E");
            String var7 = "";
            if (var6 != -1) {
                var7 = var3.substring(var6);
                var3 = var3.substring(0, var6);

                try {
                    var1 = this.parser.parse(var3).doubleValue();
                } catch (ParseException var12) {
                    throw new ErrorException(var12);
                }
            }

            NumberFormat var8 = NumberFormat.getNumberInstance(Locale.US);
            var8.setGroupingUsed(false);
            String var9 = var3.substring(0, var3.indexOf(46) + 1);
            int var10 = var4 - var5.stringWidth(var9 + var7);
            if (var10 > 0) {
                int var11 = var10 / var5.stringWidth("0");
                var8.setMaximumFractionDigits(var11);
                return var8.format(var1) + var7;
            } else {
                for(var3 = ""; var5.stringWidth(var3 + "#") <= var4; var3 = var3 + "#") {
                }

                return var3;
            }
        }
    }
}
