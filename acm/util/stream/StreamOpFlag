//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.util.stream;

import java.util.EnumMap;
import java.util.Map;
import java.util.Spliterator;

enum StreamOpFlag {
    DISTINCT(0, set(StreamOpFlag.Type.SPLITERATOR).set(StreamOpFlag.Type.STREAM).setAndClear(StreamOpFlag.Type.OP)),
    SORTED(1, set(StreamOpFlag.Type.SPLITERATOR).set(StreamOpFlag.Type.STREAM).setAndClear(StreamOpFlag.Type.OP)),
    ORDERED(2, set(StreamOpFlag.Type.SPLITERATOR).set(StreamOpFlag.Type.STREAM).setAndClear(StreamOpFlag.Type.OP).clear(StreamOpFlag.Type.TERMINAL_OP).clear(StreamOpFlag.Type.UPSTREAM_TERMINAL_OP)),
    SIZED(3, set(StreamOpFlag.Type.SPLITERATOR).set(StreamOpFlag.Type.STREAM).clear(StreamOpFlag.Type.OP)),
    SHORT_CIRCUIT(12, set(StreamOpFlag.Type.OP).set(StreamOpFlag.Type.TERMINAL_OP)),
    SIZE_ADJUSTING(13, set(StreamOpFlag.Type.OP));

    private static final int SET_BITS = 1;
    private static final int CLEAR_BITS = 2;
    private static final int PRESERVE_BITS = 3;
    private final Map<StreamOpFlag.Type, Integer> maskTable;
    private final int bitPosition;
    private final int set;
    private final int clear;
    private final int preserve;
    static final int SPLITERATOR_CHARACTERISTICS_MASK = createMask(StreamOpFlag.Type.SPLITERATOR);
    static final int STREAM_MASK = createMask(StreamOpFlag.Type.STREAM);
    static final int OP_MASK = createMask(StreamOpFlag.Type.OP);
    static final int TERMINAL_OP_MASK = createMask(StreamOpFlag.Type.TERMINAL_OP);
    static final int UPSTREAM_TERMINAL_OP_MASK = createMask(StreamOpFlag.Type.UPSTREAM_TERMINAL_OP);
    private static final int FLAG_MASK = createFlagMask();
    private static final int FLAG_MASK_IS = STREAM_MASK;
    private static final int FLAG_MASK_NOT = STREAM_MASK << 1;
    static final int INITIAL_OPS_VALUE = FLAG_MASK_IS | FLAG_MASK_NOT;
    static final int IS_DISTINCT = DISTINCT.set;
    static final int NOT_DISTINCT = DISTINCT.clear;
    static final int IS_SORTED = SORTED.set;
    static final int NOT_SORTED = SORTED.clear;
    static final int IS_ORDERED = ORDERED.set;
    static final int NOT_ORDERED = ORDERED.clear;
    static final int IS_SIZED = SIZED.set;
    static final int NOT_SIZED = SIZED.clear;
    static final int IS_SHORT_CIRCUIT = SHORT_CIRCUIT.set;
    static final int IS_SIZE_ADJUSTING = SIZE_ADJUSTING.set;

    private static StreamOpFlag.MaskBuilder set(StreamOpFlag.Type t) {
        return (new StreamOpFlag.MaskBuilder(new EnumMap(StreamOpFlag.Type.class))).set(t);
    }

    private StreamOpFlag(int param3, StreamOpFlag.MaskBuilder param4) {
        this.maskTable = maskBuilder.build();
        position *= 2;
        this.bitPosition = position;
        this.set = 1 << position;
        this.clear = 2 << position;
        this.preserve = 3 << position;
    }

    int set() {
        return this.set;
    }

    int clear() {
        return this.clear;
    }

    boolean isStreamFlag() {
        return (Integer)this.maskTable.get(StreamOpFlag.Type.STREAM) > 0;
    }

    boolean isKnown(int flags) {
        return (flags & this.preserve) == this.set;
    }

    boolean isCleared(int flags) {
        return (flags & this.preserve) == this.clear;
    }

    boolean isPreserved(int flags) {
        return (flags & this.preserve) == this.preserve;
    }

    boolean canSet(StreamOpFlag.Type t) {
        return ((Integer)this.maskTable.get(t) & 1) > 0;
    }

    private static int createMask(StreamOpFlag.Type t) {
        int mask = 0;
        StreamOpFlag[] var2 = values();
        int var3 = var2.length;

        for(int var4 = 0; var4 < var3; ++var4) {
            StreamOpFlag flag = var2[var4];
            mask |= (Integer)flag.maskTable.get(t) << flag.bitPosition;
        }

        return mask;
    }

    private static int createFlagMask() {
        int mask = 0;
        StreamOpFlag[] var1 = values();
        int var2 = var1.length;

        for(int var3 = 0; var3 < var2; ++var3) {
            StreamOpFlag flag = var1[var3];
            mask |= flag.preserve;
        }

        return mask;
    }

    private static int getMask(int flags) {
        return flags == 0 ? FLAG_MASK : ~(flags | (FLAG_MASK_IS & flags) << 1 | (FLAG_MASK_NOT & flags) >> 1);
    }

    static int combineOpFlags(int newStreamOrOpFlags, int prevCombOpFlags) {
        return prevCombOpFlags & getMask(newStreamOrOpFlags) | newStreamOrOpFlags;
    }

    static int toStreamFlags(int combOpFlags) {
        return ~combOpFlags >> 1 & FLAG_MASK_IS & combOpFlags;
    }

    static int toCharacteristics(int streamFlags) {
        return streamFlags & SPLITERATOR_CHARACTERISTICS_MASK;
    }

    static int fromCharacteristics(Spliterator<?> spliterator) {
        int characteristics = spliterator.characteristics();
        return (characteristics & 4) != 0 && spliterator.getComparator() != null ? characteristics & SPLITERATOR_CHARACTERISTICS_MASK & -5 : characteristics & SPLITERATOR_CHARACTERISTICS_MASK;
    }

    static int fromCharacteristics(int characteristics) {
        return characteristics & SPLITERATOR_CHARACTERISTICS_MASK;
    }

    private static class MaskBuilder {
        final Map<StreamOpFlag.Type, Integer> map;

        MaskBuilder(Map<StreamOpFlag.Type, Integer> map) {
            this.map = map;
        }

        StreamOpFlag.MaskBuilder mask(StreamOpFlag.Type t, Integer i) {
            this.map.put(t, i);
            return this;
        }

        StreamOpFlag.MaskBuilder set(StreamOpFlag.Type t) {
            return this.mask(t, 1);
        }

        StreamOpFlag.MaskBuilder clear(StreamOpFlag.Type t) {
            return this.mask(t, 2);
        }

        StreamOpFlag.MaskBuilder setAndClear(StreamOpFlag.Type t) {
            return this.mask(t, 3);
        }

        Map<StreamOpFlag.Type, Integer> build() {
            StreamOpFlag.Type[] var1 = StreamOpFlag.Type.values();
            int var2 = var1.length;

            for(int var3 = 0; var3 < var2; ++var3) {
                StreamOpFlag.Type t = var1[var3];
                this.map.putIfAbsent(t, 0);
            }

            return this.map;
        }
    }

    static enum Type {
        SPLITERATOR,
        STREAM,
        OP,
        TERMINAL_OP,
        UPSTREAM_TERMINAL_OP;

        private Type() {
        }
    }
}
