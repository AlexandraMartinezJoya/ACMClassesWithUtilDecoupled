//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.util;

import java.awt.Image;
import java.awt.image.ImageObserver;

class PICTImageSaver extends ImageSaver {
    private static final int OP_CLIP = 1;
    private static final int OP_VERSION = 17;
    private static final int OP_DEF_HILITE = 30;
    private static final int OP_SHORT_LINE = 34;
    private static final int OP_DIRECT_BITS_RECT = 154;
    private static final int OP_SHORT_COMMENT = 160;
    private static final int OP_LONG_COMMENT = 161;
    private static final int OP_END_PICT = 255;
    private static final int OP_HEADER = 3072;
    private static final int PS_BEGIN = 190;
    private static final int PS_END = 191;
    private static final int PS_HANDLE = 192;
    private static final int PS_DICT_SIZE = 500;
    private static final int VERSION = 767;
    private static final int PICT_PADDING = 512;
    private static final int RGB_DIRECT = 16;
    private static final int SRC_COPY = 0;
    private int[][] pixels;
    private String[] psPreview;
    private int width;
    private int height;
    private int rowBytes;
    private boolean paddingFlag = true;

    PICTImageSaver() {
    }

    public void saveImage(Image var1) {
        this.pixels = MediaTools.getPixelArray(var1);
        Object var2 = var1.getProperty("PSPreview", (ImageObserver)null);
        this.psPreview = var2 instanceof String[] ? (String[])((String[])var2) : null;
        this.width = this.pixels[0].length;
        this.height = this.pixels.length;
        this.rowBytes = 4 * this.width;
        if (this.paddingFlag) {
            this.dumpPadding();
        }

        this.dumpHeader();
        this.dumpDefHilite();
        this.dumpClipRegion();
        this.dumpBoundsMarkers();
        if (this.psPreview != null) {
            this.dumpShort(160);
            this.dumpShort(190);
        }

        this.dumpDirectBitsRect();
        if (this.psPreview != null) {
            this.dumpPSPreview();
            this.dumpShort(160);
            this.dumpShort(191);
        }

        this.dumpEndPict();
    }

    public void setPaddingFlag(boolean var1) {
        this.paddingFlag = var1;
    }

    private void dumpPadding() {
        for(int var1 = 0; var1 < 512; ++var1) {
            this.dumpByte(0);
        }

    }

    private void dumpHeader() {
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpShort(17);
        this.dumpShort(767);
        this.dumpShort(3072);
        this.dumpShort(65534);
        this.dumpShort(0);
        this.dumpShort(72);
        this.dumpShort(0);
        this.dumpShort(72);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpLong(0);
    }

    private void dumpDefHilite() {
        this.dumpShort(30);
    }

    private void dumpClipRegion() {
        this.dumpShort(1);
        this.dumpShort(10);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
    }

    private void dumpBoundsMarkers() {
        this.dumpShort(34);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(34);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpShort(0);
    }

    private void dumpDirectBitsRect() {
        this.dumpShort(154);
        this.dumpPixMap();
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpShort(0);
        this.dumpPixelData();
    }

    private void dumpPixMap() {
        this.dumpLong(255);
        this.dumpShort(this.rowBytes | 'è€€');
        this.dumpShort(0);
        this.dumpShort(0);
        this.dumpShort(this.height);
        this.dumpShort(this.width);
        this.dumpShort(0);
        this.dumpShort(4);
        this.dumpLong(0);
        this.dumpShort(72);
        this.dumpShort(0);
        this.dumpShort(72);
        this.dumpShort(0);
        this.dumpShort(16);
        this.dumpShort(32);
        this.dumpShort(3);
        this.dumpShort(8);
        this.dumpLong(0);
        this.dumpLong(0);
        this.dumpLong(0);
    }

    private void dumpEndPict() {
        this.dumpShort(255);
    }

    private void dumpPixelData() {
        int var1 = 0;
        byte[] var2 = new byte[this.rowBytes];

        for(int var3 = 0; var3 < this.height; ++var3) {
            int var4 = this.packScanLine(var2, this.pixels[var3]);
            if (this.rowBytes > 250) {
                this.dumpShort(var4);
                var1 += 2;
            } else {
                this.dumpByte(var4);
                ++var1;
            }

            for(int var5 = 0; var5 < var4; ++var5) {
                this.dumpByte(var2[var5]);
            }

            var1 += var4;
        }

        if (var1 % 2 == 1) {
            this.dumpByte(0);
        }

    }

    private int packScanLine(byte[] var1, int[] var2) {
        int var3 = 0;

        for(int var4 = 0; var4 < 3; ++var4) {
            char var5 = "RGB".charAt(var4);
            int var6 = var3;
            int var7 = var3 + 1;

            int var9;
            int var10;
            for(int var8 = 0; var8 < this.width; var3 = var7++) {
                var9 = this.getPixelComponent(var2[var8++], var5);
                var1[var7++] = (byte)var9;
                var10 = 1;
                boolean var11 = false;
                if (var8 < this.width) {
                    int var12 = this.getPixelComponent(var2[var8], var5);
                    var11 = var9 == var12;
                    if (var11) {
                        while(var10 < 128 && var8 < this.width) {
                            var12 = this.getPixelComponent(var2[var8], var5);
                            if (var9 != var12) {
                                break;
                            }

                            ++var10;
                            ++var8;
                        }
                    } else {
                        while(var10 < 128 && var8 < this.width) {
                            var12 = this.getPixelComponent(var2[var8], var5);
                            if (var9 == var12) {
                                --var7;
                                --var10;
                                --var8;
                                break;
                            }

                            var1[var7++] = (byte)var12;
                            var9 = var12;
                            ++var10;
                            ++var8;
                        }
                    }
                }

                if (var11) {
                    var1[var3] = (byte)(128 | 129 - var10);
                } else {
                    var1[var3] = (byte)(var10 - 1);
                }
            }

            if (var3 - var6 > this.width + this.width / 128) {
                var9 = this.width;
                var3 = var6;

                for(var10 = 0; var10 < this.width; ++var10) {
                    if (var10 % 128 == 0) {
                        int var13 = var9 > 128 ? 128 : var9;
                        var1[var3++] = (byte)(var13 - 1);
                        var9 -= var13;
                    }

                    var1[var3++] = (byte)this.getPixelComponent(var2[var10], var5);
                }
            }
        }

        return var3;
    }

    private void dumpPSPreview() {
        this.addPSComment("/dictCount countdictstack def");
        this.addPSComment("/opCount count 1 sub def");
        this.addPSComment("500 dict begin");
        this.addPSComment("/showpage {} def");
        this.addPSComment("0 setgray 0 setlinecap");
        this.addPSComment("1 setlinewidth 0 setlinejoin");
        this.addPSComment("10 setmiterlimit [] 0 setdash");
        this.addPSComment("/languagelevel where {");
        this.addPSComment("  pop languagelevel");
        this.addPSComment("  1 ne { false setstrokeadjust false setoverprint } if");
        this.addPSComment("} if");
        this.addPSComment("gsave");
        this.addPSComment("clippath pathbbox");
        this.addPSComment("pop pop " + this.height + " add translate");
        this.addPSComment("1 -1 scale");

        for(int var1 = 0; var1 < this.psPreview.length; ++var1) {
            this.addPSComment(this.psPreview[var1]);
        }

        this.addPSComment("grestore");
        this.addPSComment("end");
        this.addPSComment("count opCount sub {pop} repeat");
        this.addPSComment("countdictstack dictCount sub {end} repeat");
    }

    private void addPSComment(String var1) {
        if (var1.length() % 2 == 0) {
            var1 = var1 + " ";
        }

        this.dumpShort(161);
        this.dumpShort(192);
        this.dumpShort(var1.length() + 1);

        for(int var2 = 0; var2 < var1.length(); ++var2) {
            this.dumpByte(var1.charAt(var2));
        }

        this.dumpByte(13);
    }
}
