//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package acm.util;

import java.applet.AudioClip;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

class SunAudioClip implements AudioClip {
    private static boolean initialized;
    private static Class<?> audioPlayerClass;
    private static Class<?> audioStreamClass;
    private static Class<?> audioDataClass;
    private static Class<?> audioDataStreamClass;
    private static Class<?> continuousAudioDataStreamClass;
    private static Constructor<?> audioDataConstructor;
    private static Constructor<?> audioDataStreamConstructor;
    private static Constructor<?> continuousAudioDataStreamConstructor;
    private static Method getData;
    private Object player;
    private Object audioData;
    private Object audioDataStream;
    private Object continuousAudioDataStream;
    private Method audioPlayerStart;
    private Method audioPlayerStop;

    public SunAudioClip(InputStream var1) {
        if (!initialized) {
            initStaticData();
            initialized = true;
        }

        try {
            Object[] var2 = new Object[]{var1};
            Object var3 = audioDataConstructor.newInstance(var2);
            this.audioData = getData.invoke(var3);
            this.player = audioPlayerClass.getField("player").get((Object)null);
            Class[] var4 = new Class[]{Class.forName("java.io.InputStream")};
            this.audioPlayerStart = this.player.getClass().getMethod("start", var4);
            this.audioPlayerStop = this.player.getClass().getMethod("stop", var4);
        } catch (Exception var5) {
        }

    }

    public void play() {
        try {
            Object[] var1 = new Object[]{this.audioData};
            this.audioDataStream = audioDataStreamConstructor.newInstance(var1);
            var1[0] = this.audioDataStream;
            this.audioPlayerStart.invoke(this.player, var1);
        } catch (Exception var2) {
        }

    }

    public void loop() {
        try {
            Object[] var1 = new Object[]{this.audioData};
            this.continuousAudioDataStream = continuousAudioDataStreamConstructor.newInstance(var1);
            var1[0] = this.continuousAudioDataStream;
            this.audioPlayerStart.invoke(this.player, var1);
        } catch (Exception var2) {
        }

    }

    public void stop() {
        try {
            Object[] var1 = new Object[1];
            if (this.continuousAudioDataStream != null) {
                var1[0] = this.audioDataStream;
                this.audioPlayerStop.invoke(this.player, var1);
            }

            if (this.audioDataStream != null) {
                var1[0] = this.continuousAudioDataStream;
                this.audioPlayerStop.invoke(this.player, var1);
            }
        } catch (Exception var2) {
        }

    }

    private static void initStaticData() {
        try {
            audioPlayerClass = Class.forName("sun.audio.AudioPlayer");
            audioStreamClass = Class.forName("sun.audio.AudioStream");
            audioDataClass = Class.forName("sun.audio.AudioData");
            audioDataStreamClass = Class.forName("sun.audio.AudioDataStream");
            continuousAudioDataStreamClass = Class.forName("sun.audio.ContinuousAudioDataStream");
            Class[] var0 = new Class[]{Class.forName("java.io.InputStream")};
            audioDataConstructor = audioStreamClass.getConstructor(var0);
            getData = audioStreamClass.getMethod("getData");
            Class[] var1 = new Class[]{audioDataClass};
            audioDataStreamConstructor = audioDataStreamClass.getConstructor(var1);
            continuousAudioDataStreamConstructor = continuousAudioDataStreamClass.getConstructor(var1);
        } catch (Exception var2) {
        }

    }
}
